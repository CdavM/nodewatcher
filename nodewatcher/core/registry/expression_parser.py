#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 4, 22, 12, 30, 42, 4)

__all__ = [
    'ExpressionParser',
    'ExpressionSemantics',
    'main'
]

KEYWORDS = set([])


class ExpressionParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 keywords=KEYWORDS,
                 **kwargs):
        super(ExpressionParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            **kwargs
        )

    @graken()
    def _filter_(self):
        self._filter_expression_prec1_()
        self._check_eof()

    @graken()
    def _filter_expression_prec1_(self):

        def block0():
            self._filter_expression_prec2_()
            self.name_last_node('lhs')
            with self._group():
                with self._choice():
                    with self._option():
                        self._token(',')
                    with self._option():
                        self._token('|')
                    self._error('expecting one of: , |')
            self.name_last_node('op')
        self._closure(block0)
        self._filter_expression_prec2_()
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'op', 'rhs'],
            []
        )

    @graken()
    def _filter_expression_prec2_(self):

        def block0():
            with self._group():
                self._token('!')
            self.name_last_node('op')
        self._closure(block0)
        self._filter_expression_prec3_()
        self.name_last_node('expression')

        self.ast._define(
            ['op', 'expression'],
            []
        )

    @graken()
    def _filter_expression_prec3_(self):
        self._atom_()

    @graken()
    def _atom_(self):
        with self._choice():
            with self._option():
                self._equality_lookup_()
            with self._option():
                with self._group():
                    self._token('(')
                    self._filter_expression_prec1_()
                    self.name_last_node('@')
                    self._token(')')
            self._error('no available options')

    @graken()
    def _equality_lookup_(self):
        self._lookup_filter_()
        self.name_last_node('field')
        self._token('=')
        self._CONSTANT_()
        self.name_last_node('value')

        self.ast._define(
            ['field', 'value'],
            []
        )

    @graken()
    def _lookup_filter_(self):
        self._registration_point_()
        self.name_last_node('registration_point')
        self._registry_id_()
        self.name_last_node('registry_id')
        self._field_specifier_()
        self.name_last_node('field')

        self.ast._define(
            ['registration_point', 'registry_id', 'field'],
            []
        )

    @graken()
    def _lookup_(self):
        with self._optional():
            self._registration_point_()
            self.name_last_node('registration_point')
        self._registry_id_()
        self.name_last_node('registry_id')
        with self._optional():
            self._constraint_specifier_()
            self.name_last_node('constraints')
        with self._optional():
            self._field_specifier_()
            self.name_last_node('field')
        self._check_eof()

        self.ast._define(
            ['registration_point', 'registry_id', 'constraints', 'field'],
            []
        )

    @graken()
    def _registration_point_(self):
        self._FIELD_()
        self.name_last_node('@')
        self._token(':')

    @graken()
    def _registry_id_(self):

        def sep0():
            self._token('.')

        def block0():
            self._REGISTRY_ID_ATOM_()
        self._positive_closure(block0, prefix=sep0)

    @graken()
    def _REGISTRY_ID_ATOM_(self):
        self._pattern(r'[a-zA-Z0-9]+')

    @graken()
    def _field_specifier_(self):
        self._token('__')
        self._fields_()
        self.name_last_node('@')

    @graken()
    def _fields_(self):

        def sep0():
            self._token('__')

        def block0():
            self._FIELD_()
        self._positive_closure(block0, prefix=sep0)

    @graken()
    def _FIELD_(self):
        self._pattern(r'([a-zA-Z0-9]|_(?!_))+')

    @graken()
    def _constraint_specifier_(self):
        self._token('[')
        self._constraints_()
        self.name_last_node('@')
        self._token(']')

    @graken()
    def _constraints_(self):

        def sep0():
            with self._group():
                self._CONSTRAINT_SEPARATOR_()

        def block0():
            self._constraint_()
        self._positive_closure(block0, prefix=sep0)

    @graken()
    def _constraint_(self):
        self._fields_()
        self.name_last_node('field')
        self._operator_()
        self.name_last_node('operator')
        self._CONSTANT_()
        self.name_last_node('value')

        self.ast._define(
            ['field', 'operator', 'value'],
            []
        )

    @graken()
    def _CONSTRAINT_SEPARATOR_(self):
        self._token(',')

    @graken()
    def _operator_(self):
        self._token('=')

    @graken()
    def _CONSTANT_(self):
        with self._choice():
            with self._option():
                self._FLOAT_()
            with self._option():
                self._INTEGER_()
            with self._option():
                self._STRING_()
            with self._option():
                self._distance_()
            with self._option():
                self._area_()
            with self._option():
                self._tuple_()
            self._error('no available options')

    @graken()
    def _FLOAT_(self):
        self._pattern(r'[0-9+]\.[0-9+]')

    @graken()
    def _INTEGER_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _STRING_(self):
        self._token('"')

        def block1():
            with self._choice():
                with self._option():
                    self._pattern(r'[^"\n\\]')
                with self._option():
                    self._ESC_()
                self._error('expecting one of: [^"\\n\\\\]')
        self._closure(block1)
        self.name_last_node('@')
        self._token('"')

    @graken()
    def _ESC_(self):
        self._pattern(r'\\["\\]')

    @graken()
    def _tuple_(self):
        self._token('{')
        self._tuple_values_()
        self.name_last_node('@')
        self._token('}')

    @graken()
    def _tuple_values_(self):

        def sep0():
            self._token(',')

        def block0():
            self._CONSTANT_()
        self._positive_closure(block0, prefix=sep0)

    @graken()
    def _distance_(self):
        self._token('distance::')
        with self._group():
            with self._choice():
                with self._option():
                    self._FLOAT_()
                with self._option():
                    self._INTEGER_()
                self._error('no available options')
        self.name_last_node('@')

    @graken()
    def _area_(self):
        self._token('area::')
        with self._group():
            with self._choice():
                with self._option():
                    self._FLOAT_()
                with self._option():
                    self._INTEGER_()
                self._error('no available options')
        self.name_last_node('@')


class ExpressionSemantics(object):
    def filter(self, ast):
        return ast

    def filter_expression_prec1(self, ast):
        return ast

    def filter_expression_prec2(self, ast):
        return ast

    def filter_expression_prec3(self, ast):
        return ast

    def atom(self, ast):
        return ast

    def equality_lookup(self, ast):
        return ast

    def lookup_filter(self, ast):
        return ast

    def lookup(self, ast):
        return ast

    def registration_point(self, ast):
        return ast

    def registry_id(self, ast):
        return ast

    def REGISTRY_ID_ATOM(self, ast):
        return ast

    def field_specifier(self, ast):
        return ast

    def fields(self, ast):
        return ast

    def FIELD(self, ast):
        return ast

    def constraint_specifier(self, ast):
        return ast

    def constraints(self, ast):
        return ast

    def constraint(self, ast):
        return ast

    def CONSTRAINT_SEPARATOR(self, ast):
        return ast

    def operator(self, ast):
        return ast

    def CONSTANT(self, ast):
        return ast

    def FLOAT(self, ast):
        return ast

    def INTEGER(self, ast):
        return ast

    def STRING(self, ast):
        return ast

    def ESC(self, ast):
        return ast

    def tuple(self, ast):
        return ast

    def tuple_values(self, ast):
        return ast

    def distance(self, ast):
        return ast

    def area(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    parser = ExpressionParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, ExpressionParser, name='Expression')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
